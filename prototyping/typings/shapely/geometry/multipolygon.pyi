"""
This type stub file was generated by pyright.
"""

from shapely.geometry.base import BaseMultipartGeometry

"""Collections of polygons and related utilities
"""
__all__ = ["MultiPolygon"]
class MultiPolygon(BaseMultipartGeometry):
    """
    A collection of one or more Polygons.

    If component polygons overlap the collection is invalid and some
    operations on it may fail.

    Parameters
    ----------
    polygons : sequence
        A sequence of Polygons, or a sequence of (shell, holes) tuples
        where shell is the sequence representation of a linear ring
        (see LinearRing) and holes is a sequence of such linear rings.

    Attributes
    ----------
    geoms : sequence
        A sequence of `Polygon` instances

    Examples
    --------
    Construct a MultiPolygon from a sequence of coordinate tuples

    >>> from shapely import Polygon
    >>> ob = MultiPolygon([
    ...     (
    ...     ((0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (1.0, 0.0)),
    ...     [((0.1,0.1), (0.1,0.2), (0.2,0.2), (0.2,0.1))]
    ...     )
    ... ])
    >>> len(ob.geoms)
    1
    >>> type(ob.geoms[0]) == Polygon
    True
    """
    __slots__ = ...
    def __new__(self, polygons=...): # -> MultiPolygon:
        ...
    
    @property
    def __geo_interface__(self): # -> dict[str, str | list[Unknown]]:
        ...
    
    def svg(self, scale_factor=..., fill_color=..., opacity=...): # -> LiteralString | Literal['<g />']:
        """Returns group of SVG path elements for the MultiPolygon geometry.

        Parameters
        ==========
        scale_factor : float
            Multiplication factor for the SVG stroke-width.  Default is 1.
        fill_color : str, optional
            Hex string for fill color. Default is to use "#66cc99" if
            geometry is valid, and "#ff3333" if invalid.
        opacity : float
            Float number between 0 and 1 for color opacity. Default value is 0.6
        """
        ...
    


