"""
This type stub file was generated by pyright.
"""

from shapely.geometry.base import BaseGeometry
from shapely.geometry.linestring import LineString

"""Polygons and their linear ring components
"""
__all__ = ["Polygon", "LinearRing"]
class LinearRing(LineString):
    """
    A geometry type composed of one or more line segments
    that forms a closed loop.

    A LinearRing is a closed, one-dimensional feature.
    A LinearRing that crosses itself or touches itself at a single point is
    invalid and operations on it may fail.

    Parameters
    ----------
    coordinates : sequence
        A sequence of (x, y [,z]) numeric coordinate pairs or triples, or
        an array-like with shape (N, 2) or (N, 3).
        Also can be a sequence of Point objects.

    Notes
    -----
    Rings are automatically closed. There is no need to specify a final
    coordinate pair identical to the first.

    Examples
    --------
    Construct a square ring.

    >>> ring = LinearRing( ((0, 0), (0, 1), (1 ,1 ), (1 , 0)) )
    >>> ring.is_closed
    True
    >>> list(ring.coords)
    [(0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (1.0, 0.0), (0.0, 0.0)]
    >>> ring.length
    4.0

    """
    __slots__ = ...
    def __new__(self, coordinates=...): # -> LinearRing:
        ...
    
    @property
    def __geo_interface__(self): # -> dict[str, str | tuple[tuple[Unknown, ...], ...]]:
        ...
    
    def __reduce__(self): # -> tuple[(wkb: Unknown) -> Unknown, tuple[Unknown]]:
        """WKB doesn't differentiate between LineString and LinearRing so we
        need to move the coordinate sequence into the correct geometry type"""
        ...
    
    @property
    def is_ccw(self): # -> bool:
        """True is the ring is oriented counter clock-wise"""
        ...
    
    @property
    def is_simple(self): # -> bool:
        """True if the geometry is simple, meaning that any self-intersections
        are only at boundary points, else False"""
        ...
    


class InteriorRingSequence:
    _parent = ...
    _ndim = ...
    _index = ...
    _length = ...
    def __init__(self, parent) -> None:
        ...
    
    def __iter__(self): # -> Self@InteriorRingSequence:
        ...
    
    def __next__(self):
        ...
    
    def __len__(self):
        ...
    
    def __getitem__(self, key): # -> list[Unknown]:
        ...
    


class Polygon(BaseGeometry):
    """
    A geometry type representing an area that is enclosed by a linear ring.

    A polygon is a two-dimensional feature and has a non-zero area. It may
    have one or more negative-space "holes" which are also bounded by linear
    rings. If any rings cross each other, the feature is invalid and
    operations on it may fail.

    Parameters
    ----------
    shell : sequence
        A sequence of (x, y [,z]) numeric coordinate pairs or triples, or
        an array-like with shape (N, 2) or (N, 3).
        Also can be a sequence of Point objects.
    holes : sequence
        A sequence of objects which satisfy the same requirements as the
        shell parameters above

    Attributes
    ----------
    exterior : LinearRing
        The ring which bounds the positive space of the polygon.
    interiors : sequence
        A sequence of rings which bound all existing holes.

    Examples
    --------
    Create a square polygon with no holes

    >>> coords = ((0., 0.), (0., 1.), (1., 1.), (1., 0.), (0., 0.))
    >>> polygon = Polygon(coords)
    >>> polygon.area
    1.0
    """
    __slots__ = ...
    def __new__(self, shell=..., holes=...): # -> Polygon:
        ...
    
    @property
    def exterior(self):
        ...
    
    @property
    def interiors(self): # -> list[Unknown] | InteriorRingSequence:
        ...
    
    @property
    def coords(self):
        ...
    
    @property
    def __geo_interface__(self): # -> dict[str, str | tuple[tuple[Unknown, ...], ...]]:
        ...
    
    def svg(self, scale_factor=..., fill_color=..., opacity=...): # -> str:
        """Returns SVG path element for the Polygon geometry.

        Parameters
        ==========
        scale_factor : float
            Multiplication factor for the SVG stroke-width.  Default is 1.
        fill_color : str, optional
            Hex string for fill color. Default is to use "#66cc99" if
            geometry is valid, and "#ff3333" if invalid.
        opacity : float
            Float number between 0 and 1 for color opacity. Default value is 0.6
        """
        ...
    
    @classmethod
    def from_bounds(cls, xmin, ymin, xmax, ymax): # -> Self@Polygon:
        """Construct a `Polygon()` from spatial bounds."""
        ...
    


def orient(polygon, sign=...): # -> Polygon:
    ...

