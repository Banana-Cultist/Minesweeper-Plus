"""
This type stub file was generated by pyright.
"""

import typing

__doc__: str
__file__: str
__name__: str
__package__: str
__test__: dict
def evaluate_all_bspl() -> typing.Any:
    "Evaluate the ``k+1`` B-splines which are non-zero on interval ``m``.\n\n    Parameters\n    ----------\n    t : ndarray, shape (nt + k + 1,)\n        sorted 1D array of knots\n    k : int\n        spline order\n    xval: float\n        argument at which to evaluate the B-splines\n    m : int\n        index of the left edge of the evaluation interval, ``t[m] <= x < t[m+1]``\n    nu : int, optional\n        Evaluate derivatives order `nu`. Default is zero.\n\n    Returns\n    -------\n    ndarray, shape (k+1,)\n        The values of B-splines :math:`[B_{m-k}(xval), ..., B_{m}(xval)]` if\n        `nu` is zero, otherwise the derivatives of order `nu`.\n\n    Examples\n    --------\n\n    A textbook use of this sort of routine is plotting the ``k+1`` polynomial\n    pieces which make up a B-spline of order `k`.\n\n    Consider a cubic spline\n\n    >>> k = 3\n    >>> t = [0., 2., 2., 3., 4.]   # internal knots\n    >>> a, b = t[0], t[-1]    # base interval is [a, b)\n    >>> t = [a]*k + t + [b]*k  # add boundary knots\n\n    >>> import matplotlib.pyplot as plt\n    >>> xx = np.linspace(a, b, 100)\n    >>> plt.plot(xx, BSpline.basis_element(t[k:-k])(xx),\n    ...          'r-', lw=5, alpha=0.5)\n    >>> c = ['b', 'g', 'c', 'k']\n\n    Now we use slide an interval ``t[m]..t[m+1]`` along the base interval\n    ``a..b`` and use `evaluate_all_bspl` to compute the restriction of\n    the B-spline of interest to this interval:\n\n    >>> for i in range(k+1):\n    ...    x1, x2 = t[2*k - i], t[2*k - i + 1]\n    ...    xx = np.linspace(x1 - 0.5, x2 + 0.5)\n    ...    yy = [evaluate_all_bspl(t, k, x, 2*k - i)[i] for x in xx]\n    ...    plt.plot(xx, yy, c[i] + '--', lw=3, label=str(i))\n    ...\n    >>> plt.grid(True)\n    >>> plt.legend()\n    >>> plt.show()\n\n    "
    ...

def evaluate_spline(t, c, k, xp, nu, extrapolate, out) -> typing.Any:
    '\n    Evaluate a spline in the B-spline basis.\n\n    Parameters\n    ----------\n    t : ndarray, shape (n+k+1)\n        knots\n    c : ndarray, shape (n, m)\n        B-spline coefficients\n    xp : ndarray, shape (s,)\n        Points to evaluate the spline at.\n    nu : int\n        Order of derivative to evaluate.\n    extrapolate : int, optional\n        Whether to extrapolate to ouf-of-bounds points, or to return NaNs.\n    out : ndarray, shape (s, m)\n        Computed values of the spline at each of the input points.\n        This argument is modified in-place.\n\n    '
    ...

def __getattr__(name) -> typing.Any:
    ...

