"""
This type stub file was generated by pyright.
"""

import typing
import scipy.optimize._trustregion as _mod_scipy_optimize__trustregion

BaseQuadraticSubproblem = _mod_scipy_optimize__trustregion.BaseQuadraticSubproblem
class TRLIBQuadraticSubproblem(_mod_scipy_optimize__trustregion.BaseQuadraticSubproblem):
    __dict__: typing.Dict[str, typing.Any]
    def __init__(self, x, fun, jac, hess, hessp, tol_rel_i, tol_rel_b, disp) -> None:
        ...
    
    @classmethod
    def __init_subclass__(cls) -> None:
        'This method is called when a class is subclassed.\n\nThe default implementation does nothing. It may be\noverridden to extend subclasses.\n'
        ...
    
    __module__: str
    @classmethod
    def __subclasshook__(cls, subclass: typing.Any) -> bool:
        'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
        ...
    
    def solve(self, trust_radius) -> typing.Any:
        ...
    
    def __getattr__(self, name) -> typing.Any:
        ...
    


__doc__: typing.Any
__file__: str
__name__: str
__package__: str
__test__: dict
def __getattr__(name) -> typing.Any:
    ...

